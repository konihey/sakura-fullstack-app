# Vue.js + Flask フルスタックアプリケーション

## 概要
このプロジェクトは、Vue.js（フロントエンド）とFlask（バックエンド）を使用したフルスタックアプリケーションです。Docker Composeを使用して開発環境を構築し、さくらVPSにデプロイすることを想定しています。

## 技術スタック

### フロントエンド
- Vue 3 + Composition API
- Element Plus（UIコンポーネント）
- Vue Router（ルーティング）
- Pinia（状態管理）
- Axios（APIクライアント）
- TypeScript

### バックエンド
- Flask RESTful
- Flask-SQLAlchemy
- Flask-Migrate
- Flask-JWT-Extended
- Flask-CORS

### データベース
- PostgreSQL

### インフラ
- Docker / Docker Compose
- Nginx（リバースプロキシ）
- さくらVPS
- SSL/TLS（Lets Encrypt）

## プロジェクトフォルダ構成

```
sakura-fullstack-app/
├── backend/
│   ├── app/
│   │   ├── __init__.py          # Flaskアプリ初期化、DB設定
│   │   ├── models/
│   │   │   ├── __init__.py
│   │   │   ├── task.py         # タスクモデル
│   │   │   └── user.py         # ユーザーモデル
│   │   ├── routes/
│   │   │   ├── __init__.py
│   │   │   ├── auth_routes.py  # 認証関連API
│   │   │   ├── sample_routes.py # サンプルAPI
│   │   │   ├── task_routes.py  # タスク関連API
│   │   │   └── user_routes.py  # ユーザー関連API
│   │   └── scripts/            # 管理用スクリプト
│   ├── migrations/             # DBマイグレーション
│   ├── app.py                  # アプリケーションエントリーポイント
│   ├── Dockerfile
│   └── requirements.txt
│
├── frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── HeaderNav.vue    # ヘッダーナビゲーション
│   │   │   ├── LoginForm.vue    # ログインフォーム
│   │   │   ├── RegisterForm.vue # 登録フォーム
│   │   │   └── UserProfile.vue  # ユーザープロフィール
│   │   ├── constants/
│   │   │   └── api.ts          # APIエンドポイント定義
│   │   ├── router/
│   │   │   └── index.ts        # ルート定義
│   │   ├── stores/
│   │   │   └── auth.ts         # 認証状態管理
│   │   ├── types/
│   │   │   ├── auth.ts         # 認証関連の型定義
│   │   │   ├── error.ts        # エラー関連の型定義
│   │   │   └── user.ts         # ユーザー関連の型定義
│   │   ├── utils/
│   │   │   ├── axios.ts        # APIクライアント設定
│   │   │   └── error-handler.ts # エラーハンドリング
│   │   ├── views/
│   │   │   ├── admin/
│   │   │   │   └── UsersView.vue # 管理者用ユーザー一覧
│   │   │   ├── HomeView.vue
│   │   │   ├── LoginView.vue
│   │   │   └── RegisterView.vue
│   │   ├── App.vue
│   │   └── main.ts
│   ├── index.html
│   ├── package.json
│   ├── vite.config.ts
│   └── Dockerfile
│
├── nginx/
│   ├── conf.d/               # Nginx設定
│   └── ssl/                  # SSL証明書
│
├── doc/                      # ドキュメント
├── .gitignore
├── docker-compose.yml
└── README.md
```

## 主要ファイルの役割

### バックエンド
- `auth_routes.py`: JWT認証、ログイン・登録処理
- `user_routes.py`: ユーザー情報の取得・更新
- `task_routes.py`: タスク関連のCRUD操作
- `sample_routes.py`: サンプルエンドポイント

### フロントエンド
- `components/`: 再利用可能なUI部品
  - `HeaderNav.vue`: ナビゲーションバー
  - `LoginForm.vue`: ログインフォームコンポーネント
  - `RegisterForm.vue`: 登録フォームコンポーネント
  - `UserProfile.vue`: ユーザー情報表示

- `views/`: ページコンポーネント
  - `admin/UsersView.vue`: 管理者用ユーザー管理画面
  - `HomeView.vue`: ホーム画面
  - `LoginView.vue`: ログイン画面
  - `RegisterView.vue`: ユーザー登録画面

- `utils/`: ユーティリティ
  - `axios.ts`: APIクライアントの設定
  - `error-handler.ts`: エラーハンドリング共通処理

- `types/`: TypeScript型定義
  - `auth.ts`: 認証関連の型定義
  - `error.ts`: エラー関連の型定義
  - `user.ts`: ユーザー関連の型定義

## 主要機能

### 認証システム
- JWT認証
- ユーザー登録・ログイン
- 認証状態の永続化
- セッション管理

### データベース
- マイグレーション管理
- リレーショナルデータモデル
- CRUD操作の実装

### セキュリティ
- SSL/TLS対応
- CORS設定
- セキュリティヘッダー実装

## セットアップ手順

### 1. 開発環境の準備
```bash
# リポジトリのクローン
git clone <repository-url>
cd sakura-fullstack-app

# コンテナのビルドと起動
docker compose up -d --build

# バックエンドのマイグレーション
docker compose exec backend flask db upgrade
```

### 2. 環境設定
環境変数は`docker-compose.yml`内で設定されています：

```yaml
services:
  frontend:
    environment:
      - VITE_API_URL=https://konitest.duckdns.org  # 開発時はhttp://localhost
      
  backend:
    environment:
      - FLASK_DEBUG=1
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/fullstack_db

  db:
    environment:
      - POSTGRES_DB=fullstack_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
```

## デプロイメント

### VPSへのデプロイ手順

1. サーバー初期設定
```bash
# 必要なパッケージのインストール
sudo apt update
sudo apt install docker docker-compose git
```

2. SSLの設定
```bash
# certbotのインストール
sudo apt install certbot python3-certbot-nginx

# 証明書の取得
sudo certbot certonly --standalone -d your-domain.com
```

3. アプリケーションのデプロイ
```bash
# アプリケーションのクローンと起動
git clone <repository-url>
cd fullstack-app
docker compose up -d --build

# マイグレーションの実行
docker compose exec backend flask db upgrade
```

## 開発ガイドライン

### バックエンド（Flask）

#### モデルの定義
```python
from app import db

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
```

#### APIエンドポイントの実装
```python
@auth_bp.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    user = User.query.filter_by(username=data['username']).first()
    if user and user.check_password(data['password']):
        access_token = create_access_token(identity=str(user.id))
        return jsonify({'access_token': access_token})
```

### フロントエンド（Vue.js）

#### Piniaストアの実装
```typescript
export const useAuthStore = defineStore('auth', () => {
  const user = ref<User | null>(null)
  const token = ref<string | null>(null)
  const isAuthenticated = computed(() => !!token.value)

  const login = async (credentials: LoginForm) => {
    const response = await apiClient.post('/api/auth/login', credentials)
    token.value = response.data.access_token
    localStorage.setItem('token', response.data.access_token)
  }

  return {
    user,
    isAuthenticated,
    login
  }
})
```

## トラブルシューティング

### よくある問題と解決方法

1. データベース接続エラー
```bash
# DBコンテナの再起動
docker compose restart db
```

2. マイグレーションエラー
```bash
# マイグレーションのリセット
docker compose exec backend flask db stamp head
docker compose exec backend flask db migrate
docker compose exec backend flask db upgrade
```

## 運用上の注意点

1. セキュリティ
- デバッグモードは本番環境で無効化
- 環境変数による機密情報の管理
- 定期的なセキュリティアップデート

2. バックアップ
- データベースの定期バックアップ
- 設定ファイルのバックアップ

3. 監視
- ログの定期確認
- リソース使用状況の監視

## ライセンス
MIT

## 貢献
1. このリポジトリをフォーク
2. 新しいブランチを作成（`git checkout -b feature/amazing-feature`）
3. 変更をコミット（`git commit -m 'Add some amazing feature'`）
4. ブランチにプッシュ（`git push origin feature/amazing-feature`）
5. プルリクエストを作成